'.source.sass, .source.css.sass, .source.css.scss, .source.scss, .source.css':
  'Big Block Comment':
    'prefix': 'bbcom'
    'body': """
        // ====================================
        // $1
        // ====================================
        """

  'Block Comment':
    'prefix': 'bcom'
    'body': """
        // ------------------------------------
        // $1
        // ------------------------------------
        """

'.source.js, .source.javascript, .source.jsx':
  'Debugger':
    'prefix': 'debug'
    'body': 'debugger // eslint-disable-line'

  'Console log':
    'prefix': 'log'
    'body': 'console.log($1);'

  'Console warning':
    'prefix': 'warn'
    'body': 'console.warn($1);'

  'Console error':
    'prefix': 'error'
    'body': 'console.error($1);'

  'Styled Component theme fn':
    'prefix': 'theme'
    'body': '${({ theme }) => theme.${1:something}};'

  'Component Setup for Tests':
    'prefix': 'setup'
    'body': """
        const setup = () => {
          const spies = {
            someFunction: jest.fn(),
          };

          const props = {
            id: '1',
            isLoading: true,
            ...spies,
          };

          return { spies, props };
        }
        """

  'describe block':
    'prefix': 'desc'
    'body': """
        describe('${1:Unit being tested}', () => {
          $2
        });
        """

  'test block':
    'prefix': 'test'
    'body': """
        test('${1:will do something}', () => {
          $2
        });
        """

  'it style test block':
    'prefix': 'it'
    'body': """
        it('${1:will do something}', () => {
          $2
        });
        """

  'expect':
    'prefix': 'xp'
    'body': "expect($1).$2();"

  'toBe':
    'prefix': 'xp='
    'body': "expect($1).toBe($2);"

  'toBeTruthy':
    'prefix': 'xpt'
    'body': "expect($1).toBeTruthy($2);"

  'toBeFalsy':
    'prefix': 'xpf'
    'body': "expect($1).toBeFalsy($2);"

  'toBeDefined':
    'prefix': 'xpd'
    'body': "expect($1).toBeDefined();"

  'toBeNull':
    'prefix': 'xpn'
    'body': "expect($1).toBeNull();"

  'toBeGreaterThan':
    'prefix': 'xp>'
    'body': "expect(${1:aNumber}).toBeGreaterThan(${2:anotherNumber});"

  'toBeGreaterThanOrEqual':
    'prefix': 'xp>='
    'body': "expect(${1:aNumber}).toBeGreaterThanOrEqual(${2:anotherNumber});"

  'toBeLessThan':
    'prefix': 'xp<'
    'body': "expect(${1:aNumber}).toBeLessThan(${2:anotherNumber});"

  'toBeLessThanOrEqual':
    'prefix': 'xp<='
    'body': "expect(${1:aNumber}).toBeLessThanOrEqual(${2:anotherNumber});"

  'toEqual (Deep Equal)':
    'prefix': 'xpde'
    'body': "expect(${1:deepNestedObject}).toEqual(${2:matchingObject});"

  'toMatch (Regexp)':
    'prefix': 'xpreg'
    'body': "expect(${1:'string'}).toMatch(${2:/matcher/});"

  'toHaveLength':
    'prefix': 'xplen'
    'body': "expect(${1:[1, 2, 3]}).toHaveLength(${2:3});"

  'toContain (item in array)':
    'prefix': 'xpin'
    'body': "expect(${1:['orange', 'apple', 'pineapple']}).toContain(${2:'apple'});"

  'toContainEqual (deep equal in array)':
    'prefix': 'xpinde'
    'body': "expect(${1:[object1, object2]}).toContainEqual(${2:{age: 21}});"

  'toMatchObject (match a subset of key/val in object)':
    'prefix': 'xpmo'
    'body': "expect(${1:objectWithManyKeys}).toMatchObject(${2:objectWithSomeKeys});"

  'toThrow':
    'prefix': 'xpthrow'
    'body': "expect(() => ${1:someFunction}($2)).toThrow();"

  'toBeCalled':
    'prefix': 'xptbc'
    'body': "expect(${1:someFunction}).toBeCalled();"

  'toBeCalledWith':
    'prefix': 'xptbcw'
    'body': "expect(${1:someFunction}).toBeCalledWith(${2:'value'});"

  'toHaveBeenCalledTimes':
    'prefix': 'xptbct'
    'body': "expect(${1:someFunction}).toHaveBeenCalledTimes(${2:numberOfTimes});"

  'toHaveBeenLastCalledWith':
    'prefix': 'xptbcwl'
    'body': "expect(${1:someFunction}).toHaveBeenLastCalledWith(${2:'value'});"

  'toMatchSnapshot':
    'prefix': 'xpsnap'
    'body': "expect(${1:wrapper}).toMatchSnapshot();"

  '(Enzyme) Shallow':
    'prefix': 'shallow'
    'body': """
        const { props, spies } = setup();
        const wrapper = shallow(<${1:ComponentName} {...props} />);

        expect(wrapper).toMatchSnapshot();
        """

  '(Enzyme) Mount':
    'prefix': 'mount'
    'body': """
        const { props, spies } = setup();
        const wrapper = mount(<${1:ComponentName} {...props} />);

        expect(wrapper).toMatchSnapshot();
        """

  '(Enzyme) Render':
    'prefix': 'render'
    'body': """
        const { props, spies } = setup();
        const wrapper = render(<${1:ComponentName} {...props} />);

        expect(wrapper).toMatchSnapshot();
        """

  'Big Block Comment':
    'prefix': 'bbcom'
    'body': """
        // ====================================
        // $1
        // ====================================
        """

  'Block Comment':
    'prefix': 'bcom'
    'body': """
        // ------------------------------------
        // $1
        // ------------------------------------
        """

  'index':
    'prefix': 'index'
    'body': "export { default } from './$1';"

  'className':
    'prefix': '.'
    'body': 'className={classes.$1}'

  'import from':
    'prefix': 'imp'
    'body': "import ${1:ComponentName} from '${2:./pathto/ComponentName}';"

  'Validate Children':
    'prefix': 'children'
    'body': "children: PT.oneOfType([PT.element, PT.arrayOf(PT.element)])"

  'Function':
    'prefix': 'f'
    'body': """
        ${1:doSomething} = (${2:param1, param2}) => {
          ${3:// do some things}
        }
    """
  'Element Ref':
    'prefix': 'ref'
    'body': 'ref={element => { this.${1:refName} = element; }}'

  'React Class Starter':
    'prefix': 'rcc'
    'body': """
        import React, { PureComponent } from 'react';
        import PT from 'prop-types';

        export default class ${1:ComponentName} extends PureComponent {
          static propTypes = {
            name: PT.string,
          }

          static defaultProps = {
            name: 'Colby',
          }

          render() {
            const { name } = this.props;

            return (
              <div>
                Hello {name}
              </div>
            );
          }
        }
        """

  'Redux Factory Starter':
    'prefix': 'redfact'
    'body': """
        import { MODULE_NAME } from './reduxModuleStarter';

        export const snippetData = {
          1: {
            id: '1',
            isAmazing: true,
            name: 'Amazing Data',
            awards: ['1', '2', '3', '4'],
          },
          2: {
            id: '2',
            isAmazing: false,
            name: 'Failure Data',
            awards: [],
          },
        }

        export default {
          [MODULE_NAME]: {
            snippetData,
            isLoading: false,
          },
        }
        """

  'Redux Action Group':
    'prefix': 'action'
    'body': """
        export const ${1:ACTION_NAME} = `${STORE_KEY}/${1:ACTION_NAME}`;
        export const ${2:actionNameFunction} = payload => ({
          type: ${1:ACTION_NAME},
          payload,
        });
        actions[${1:ACTION_NAME}] = (state, { payload }) => ({
          ...state,
          ...payload,
        });
        """


  'Redux Thunk':
    'prefix': 'thunk'
    'body': """
        export const ${3:thunkName} = () => async dispatch => {
          dispatch(${2:actionNameFunction}())
          };
    """

  'Redux Async Action Group':
    'prefix': 'aaction'
    'body': """
        export const ${1:ACTION_NAME}_REQUEST = `${STORE_KEY}/${1:ACTION_NAME}_REQUEST`;
        export const ${2:actionName}Request = payload => ({
          type: ${1:ACTION_NAME}_REQUEST,
          payload,
        });
        actions[${1:ACTION_NAME}_REQUEST] = state => ({
          ...state,
          isLoading: true,
        });

        export const ${1:ACTION_NAME}_SUCCESS = `${STORE_KEY}/${1:ACTION_NAME}_SUCCESS`;
        export const ${2:actionName}Success = payload => ({
          type: ${1:ACTION_NAME}_SUCCESS,
          payload,
        });
        actions[${1:ACTION_NAME}_SUCCESS] = (state, { payload: { data } }) => ({
          ...state,
          data,
          isLoading: false,
        });

        export const ${1:ACTION_NAME}_ERROR = `${STORE_KEY}/${1:ACTION_NAME}_ERROR`;
        export const ${2:actionName}Error = error => ({
          type: ${1:ACTION_NAME}_ERROR,
          payload: { error },
        });
        actions[${1:ACTION_NAME}_ERROR] = (state, { payload: { error } }) => ({
          ...state,
          error,
        });

        export const ${2:thunkName} = (data) => async dispatch => {
          try {
            dispatch(${2:actionName}Request({ data }));
            // const response = await api.doSomething({ data });

            dispatch(${2:actionName}Success(response));
          } catch (error) {
            dispatch(${2:actionName}Error(error));
          }
        }
        $3
        """

  'Redux Connect':
    'prefix': 'redcon'
    'body': """
        import { connect } from 'react-redux';
        import { selectThing } from '../modules/things';

        const mapStateToProps = (state, ownProps) => ({
          name: selectThing(state, ownProps.id).name,
          createdAt: selectThing(state, ownProps.id).createdAt,
        });
        const actions = {
          doSomethingWithThing,
        };

        export default connect(mapStateToProps, actions)(${1:ComponentName});
        """

  'Mocked Storybook Starter':
    'prefix': 'stbm'
    'body': """
        import React from 'react'
        import { storiesOf, action } from '@kadira/storybook'

        import { Provider } from 'react-redux'
        import reduxThunk from 'redux-thunk'
        import configureStore from 'redux-mock-store'
        import axios from 'axios'
        import MockAdapter from 'axios-mock-adapter'

        import snippetFactory from './factoryStarter.js'

        const mockStore = configureStore([reduxThunk])(snippetFactory)
        const mockApi = new MockAdapter(axios)
        mockApi.onAny().reply(200, {})

        storiesOf('${1:Feature Name}', module)
          .addDecorator((story) => (
            <Provider store={mockStore}>
              {story()}
            </Provider>
          ))
          .add('component with mocked store', () => (
            <div onClick={action('You clicked a div of text!')}>I am a component of some sort</div>
          ))
        """

  'Storybook Starter':
    'prefix': 'stb'
    'body': """
        import React from 'react'
        import { storiesOf, action } from '@kadira/storybook'

        storiesOf('${1:Feature Name}', module)
          .addDecorator((story) => (
            <div>
              <h1>I decorate the story!</h1>
              {story()}
            </div>
          ))
          .add('Basic story', () => (
            <div onClick={action('You clicked a div of text!')}>I am a component of some sort</div>
          ))
        """

  'Schema Starter':
    'prefix': 'schs'
    'body': """
        import { schema } from 'normalizr'

        const entity = new schema.Entity('entities', {
          awards: [award],
        }, {
          processStrategy: (value) => ({
              id: value.id,
              name: value.attributes.name,
              isAmazing: value.attributes.is_amazing,
              awards: value.awards,
            }),
        })

        const child = new schema.Entity('children')

        export default {
          data: [entity],
        }
        """

  'Redux Module':
    'prefix': 'redmod'
    'body': """
        // ------------------------------------
        // Selectors
        // ------------------------------------
        export const STORE_KEY = '${1:moduleName}'; // Dont forget to hookup in rootReducers!
        export const select${2:ModuleName}State = state => state[STORE_KEY];

        // ------------------------------------
        // Reducer
        // ------------------------------------
        const actions = {};
        const initialState = {
          ${1:moduleName}Data: {},
          hasLoaded: false,
          errors: null,
        };
        const ${1:moduleName}Reducer = (state = initialState, action) => {
          const handler = actions[action.type];

          return handler ? handler(state, action) : state;
        };
        export default ${1:moduleName}Reducer;

        // ------------------------------------
        // Rest of your logic goes here
        // Use action or aaction snippets
        // ------------------------------------

        $3
        """
